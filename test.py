import os
import time
from agents import agent0_validator, agent1_extractor
from src.services.file_parser import FileParser  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä


def print_header(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
    print("\n" + "=" * 60)
    print(f" {text} ".center(60))
    print("=" * 60)


def print_section(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    print("\n" + "-" * 40)
    print(f" {text} ")
    print("-" * 40)


def test_resume_processing(file_path):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—é–º–µ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ data/")
        return

    print_header("–ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ó–Æ–ú–ï")
    print(f"–§–∞–π–ª: {file_path}")

    # 1. –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
    print_section("1. –ü–ê–†–°–ò–ù–ì –§–ê–ô–õ–ê")
    start_time = time.time()

    try:
        parser = FileParser()
        parser.load(file_path)

        parse_time = time.time() - start_time
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(parser.text)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")
        print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(parser.links)} —Å—Å—ã–ª–æ–∫")
        print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {parse_time:.2f} —Å–µ–∫")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return

    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—é–º–µ
    print_section("2. –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–Æ–ú–ï")
    start_time = time.time()

    try:
        validation_result = agent0_validator(parser.text)
        validation_time = time.time() - start_time

        if validation_result.get("error"):
            print(f"‚úó –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result['error']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å API
            if "API" in validation_result["error"]:
                print("\n–í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê:")
                print("API-–∫–ª—é—á, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                print("1. –î–ª—è Comet API: –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (—Å–º. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏–∂–µ)")
                print("2. –î–ª—è OpenRouter: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ –≤ llmclient.py")
                print("   –∏ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ (–Ω–µ 'api/v1')")
                print("\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–õ–û–ö–ò–†–û–í–ö–ï:")
                print("Comet API: 'Sorry, you have been blocked'")
                print("OpenRouter: 'The model \"api/v1\" is not available'")
            return
        else:
            print(f"‚úì –≠—Ç–æ {'—Ä–µ–∑—é–º–µ' if validation_result['is_resume'] else '–ù–ï —Ä–µ–∑—é–º–µ'}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {validation_result['confidence']:.2f}")
            print(f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {validation_result['explain']}")
            print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {validation_time:.2f} —Å–µ–∫")

            if not validation_result['is_resume']:
                print("\n‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ —Ä–µ–∑—é–º–µ.")
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ.")
                return
    except Exception as e:
        print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        return

    # 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    print_section("3. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ê–¢–†–ò–ë–£–¢–û–í")
    start_time = time.time()

    try:
        extraction_result = agent1_extractor(parser.text)
        extraction_time = time.time() - start_time

        if extraction_result.get("error"):
            print(f"‚úó –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extraction_result['error']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å API
            if "API" in extraction_result["error"]:
                print("\n–í–û–ó–ú–û–ñ–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê:")
                print("API-–∫–ª—é—á, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                print("1. –î–ª—è Comet API: –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (—Å–º. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏–∂–µ)")
                print("2. –î–ª—è OpenRouter: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏ –≤ llmclient.py")
                print("   –∏ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ (–Ω–µ 'api/v1')")
                print("\n–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–õ–û–ö–ò–†–û–í–ö–ï:")
                print("Comet API: 'Sorry, you have been blocked'")
                print("OpenRouter: 'The model \"api/v1\" is not available'")
            return
        else:
            print("‚úì –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {extraction_time:.2f} —Å–µ–∫")
    except Exception as e:
        print(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {str(e)}")
        return

    # 4. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_section("4. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")

    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\nüë§ –õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {extraction_result.get('full_name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
    print(f"Email: {extraction_result.get('email', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    education = extraction_result.get('education', [])
    if education and education[0] is not None:
        print("\nüéì –û–ë–†–ê–ó–û–í–ê–ù–ò–ï:")
        for i, edu in enumerate(education):
            print(f"{i + 1}. {edu.get('degree', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –≤ {edu.get('field', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {edu.get('institution', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {edu.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω')} - {edu.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            if edu.get('grade'):
                print(f"   –û—Ü–µ–Ω–∫–∞: {edu.get('grade')}")

    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    employment = extraction_result.get('employment_details', [])
    if employment and employment[0] is not None:
        print("\nüíº –û–ü–´–¢ –†–ê–ë–û–¢–´:")
        for i, emp in enumerate(employment):
            print(f"{i + 1}. {emp.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –≤ {emp.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {emp.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   –ü–µ—Ä–∏–æ–¥: {emp.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω')} - {emp.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {emp.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

    # –ù–∞–≤—ã–∫–∏
    programming_languages = extraction_result.get('programming_languages', [])
    if programming_languages and programming_languages[0] is not None:
        print("\nüíª –Ø–ó–´–ö–ò –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Ø:")
        for lang in programming_languages:
            print(f"- {lang.get('language', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}: {lang.get('proficiency', '–£—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω')}")

    technical_skills = extraction_result.get('technical_skills', [])
    if technical_skills and technical_skills[0] is not None:
        print("\nüõ†Ô∏è –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ù–ê–í–´–ö–ò:")
        for skill in technical_skills:
            print(f"- {skill.get('category', '–î—Ä—É–≥–æ–µ')}: {', '.join(skill.get('skills', []))}")

    languages = extraction_result.get('languages', [])
    if languages and languages[0] is not None:
        print("\nüåç –Ø–ó–´–ö–ò:")
        for lang in languages:
            print(f"- {lang.get('language', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}: {lang.get('proficiency', '–£—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω')}")

    soft_skills = extraction_result.get('soft_skills', [])
    if soft_skills:
        print("\nü§ù –ú–Ø–ì–ö–ò–ï –ù–ê–í–´–ö–ò:")
        print(", ".join(soft_skills))

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = parse_time + validation_time + extraction_time
    print(f"\n‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø –û–ë–†–ê–ë–û–¢–ö–ò: {total_time:.2f} —Å–µ–∫")

    print_header("–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")


if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    test_file = "data/Baizak.pdf"

    if not os.path.exists(test_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É data/")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ data
        if os.path.exists("data"):
            for file in os.listdir("data"):
                if file.lower().endswith(('.pdf', '.docx', '.doc')):
                    print(f"- data/{file}")
        else:
            print("- –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É data –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Ç—É–¥–∞")
    else:
        test_resume_processing(test_file)
