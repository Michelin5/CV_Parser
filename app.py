import streamlit as st
import os
import tempfile
from src.workflow import ResumeProcessingWorkflow
import pprint
import datetime
import time
import json


def main():
    st.set_page_config(
        page_title="Resume Key Attributes Extractor",
        page_icon="üìÑ",
        layout="wide"
    )

    st.title("üìÑ Resume Parser")
    st.markdown("""
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX) –∏ —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'processing_result' not in st.session_state:
        st.session_state.processing_result = None
    if 'current_file_name' not in st.session_state:
        st.session_state.current_file_name = None

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ",
        type=["pdf", "docx", "doc"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    if uploaded_file is not None:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        if st.session_state.current_file_name != uploaded_file.name:
            st.session_state.current_file_name = uploaded_file.name
            st.session_state.processing_result = None

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                os.makedirs("temp_uploads", exist_ok=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                file_path = os.path.join("temp_uploads", uploaded_file.name)
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ
                workflow = ResumeProcessingWorkflow()
                result = workflow.process_resume(file_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state
                st.session_state.processing_result = result

                # –û—á–∏—Å—Ç–∫–∞
                os.remove(file_path)

                # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ production)
                # st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ session_state")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = st.session_state.processing_result
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
        st.session_state.current_file_name = None
        st.session_state.processing_result = None

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if st.session_state.processing_result is not None:
        result = st.session_state.processing_result

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if result.get("error"):
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å API
            if "API" in result["error"]:
                st.warning("""
                **–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:** –ü—Ä–æ–±–ª–µ–º–∞ —Å API-–∫–ª—é—á–æ–º

                Comet API –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: "Sorry, you have been blocked"
                OpenRouter –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É: "The model 'api/v1' is not available"

                **–†–µ—à–µ–Ω–∏–µ:**
                1. –î–ª—è Comet: —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                2. –î–ª—è OpenRouter: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ llmclient.py
                   –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "qwen/qwen-2.5-72b-instruct")
                """)
        else:
            st.success("‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")

            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if result.get("validation_result"):
                validation = result["validation_result"]
                st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")

                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–≠—Ç–æ —Ä–µ–∑—é–º–µ?", "–î–∞" if validation["is_resume"] else "–ù–µ—Ç",
                              delta=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –≤ —Ç–æ–º —á—Ç–æ —Ñ–∞–π–ª - —Ä–µ–∑—é–º–µ: {validation['confidence']:.2f}")
                    # st.write(f"**–§–æ—Ä–º–∞—Ç:** {validation['primary_format']}")
                    # st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** {validation['suggested_action']}")

                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—é–º–µ
                if result.get("extraction_result") and result.get("validation_result", {}).get("is_resume", False):
                    st.subheader("üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

                    extraction = result["extraction_result"]

                    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.markdown("### üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.write("**–ü–æ–ª–Ω–æ–µ –∏–º—è:**", extraction["full_name"] or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                    with col2:
                        st.write("**Email:**", extraction["email"] or "–ù–µ –Ω–∞–π–¥–µ–Ω")
                    with col3:
                        st.write("**Phone:**", extraction["phone_number"] or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

                    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                    if extraction["education"]:
                        st.markdown("### üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
                        for edu in extraction["education"]:
                            with st.expander(f"{edu['degree']} –≤ {edu['field']}"):
                                st.write("**–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:**", edu["institution"] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                                period = f"{edu['start_date']} - {edu['end_date']}"
                                st.write("**–ü–µ—Ä–∏–æ–¥:**", period)
                                if edu["grade"]:
                                    st.write("**–û—Ü–µ–Ω–∫–∞/—Ä–µ–π—Ç–∏–Ω–≥:**", edu["grade"])

                    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
                    if extraction["employment_details"]:
                        st.markdown("### üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
                        for emp in extraction["employment_details"]:
                            with st.expander(f"{emp['title']} –≤ {emp['company']}"):
                                st.write("**–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:**", emp["location"] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                                period = f"{emp['start_date']} - {emp['end_date']}"
                                st.write("**–ü–µ—Ä–∏–æ–¥:**", period)
                                st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**", emp["description"] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

                    # –ù–∞–≤—ã–∫–∏
                    col1, col2 = st.columns(2)

                    with col1:
                        if extraction["technical_skills"]:
                            st.markdown("### üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏")
                            for skill in extraction["technical_skills"]:
                                st.write(f"**{skill['category'] or '–î—Ä—É–≥–æ–µ'}**: {', '.join(skill['skills'])}")

                    with col2:
                        if extraction["languages"]:
                            st.markdown("### üåç –Ø–∑—ã–∫–∏")
                            for lang in extraction["languages"]:
                                st.write(f"- **{lang['language']}**: {lang['proficiency'] or '–£—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω'}")

                    # –î—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã
                    if extraction["projects"]:
                        st.markdown("### üìÇ –ü—Ä–æ–µ–∫—Ç—ã")
                        for project in extraction["projects"]:
                            with st.expander(project["title"] or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"):
                                st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**", project["description"] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                                st.write("**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**", ", ".join(project["technologies"]) if project[
                                    "technologies"] else "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
                                st.write("**–ü–µ—Ä–∏–æ–¥:**", project["period"] or "–ù–µ —É–∫–∞–∑–∞–Ω")

                    if extraction["publications"]:
                        st.markdown("### üìö –ü—É–±–ª–∏–∫–∞—Ü–∏–∏")
                        for pub in extraction["publications"]:
                            with st.expander(pub["title"] or "–ë–µ–∑—ã–º—è–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"):
                                st.write("**–ò—Å—Ç–æ—á–Ω–∏–∫:**", pub["venue"] or "–ù–µ —É–∫–∞–∑–∞–Ω")
                                st.write("**–ì–æ–¥:**", pub["year"] or "–ù–µ —É–∫–∞–∑–∞–Ω")
                                st.write("**–ê–≤—Ç–æ—Ä—ã:**", ", ".join(pub["authors"]) if pub["authors"] else "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
                                st.write("**–°—Å—ã–ª–∫–∞:**", pub["link"] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

                    if extraction["soft_skills"]:
                        st.markdown("### ü§ù Soft skills")
                        st.write(", ".join(extraction["soft_skills"]))

                    if extraction["additional_information"]:
                        st.markdown("### ‚ÑπÔ∏è Additional information")
                        st.write(extraction["additional_information"])

                    st.markdown("---")
                    st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    full_results = {
                        "metadata": {
                            "processed_at": str(datetime.datetime.now()),
                            "file_name": st.session_state.current_file_name,
                            "file_size": f"{len(result['file_content'])} —Å–∏–º–≤–æ–ª–æ–≤"
                        },
                        "validation": result["validation_result"],
                        "extraction": result["extraction_result"]
                    }

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
                    json_data = json.dumps(full_results, indent=2, ensure_ascii=False)

                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (JSON)",
                        data=json_data,
                        file_name=f"resume_results_{int(time.time())}.json",
                        mime="application/json",
                        help="–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
                        use_container_width=True
                    )

                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if result["extraction_result"]:
                        structured_data = json.dumps(result["extraction_result"], indent=2, ensure_ascii=False)
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)",
                            data=structured_data,
                            file_name=f"resume_data_{int(time.time())}.json",
                            mime="application/json",
                            help="–°–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ",
                            use_container_width=True
                        )

                # –ï—Å–ª–∏ –Ω–µ —Ä–µ–∑—é–º–µ
                elif result.get("validation_result") and not result["validation_result"]["is_resume"]:
                    st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ —Ä–µ–∑—é–º–µ/CV.")
                    st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–∑—é–º–µ.")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
    st.sidebar.title("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.info("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã —Ä–µ–∑—é–º–µ.

    **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ (PDF/DOC/DOCX)
    2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–∑—é–º–µ
    3. –ï—Å–ª–∏ –¥–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    4. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    # if st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"):
    #     st.session_state.current_file_name = None
    #     st.session_state.processing_result = None
    #     st.rerun()


if __name__ == "__main__":
    main()