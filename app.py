import streamlit as st
import os
import tempfile
from src.workflow import ResumeProcessingWorkflow
from agents import custom_summarizer
import pprint
import datetime
import time
import json


def main():
    st.set_page_config(
        page_title="Resume Key Attributes Extractor",
        page_icon="üìÑ",
        layout="wide"
    )

    st.title("üìÑ Resume Parser")
    st.markdown("""
    Upload your resume in English (PDF or DOCX) and the system extracts the key information in a structured format.
    """)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'processing_result' not in st.session_state:
        st.session_state.processing_result = None
    if 'current_file_name' not in st.session_state:
        st.session_state.current_file_name = None
    if 'custom_summary' not in st.session_state:
        st.session_state.custom_summary = None

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "Upload resume file",
        type=["pdf", "docx"],
        help="Supported extensions: PDF, DOCX"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    if uploaded_file is not None:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
        if st.session_state.current_file_name != uploaded_file.name:
            st.session_state.current_file_name = uploaded_file.name
            st.session_state.processing_result = None
            st.session_state.custom_summary = None

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ
            with st.spinner("File processing..."):
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                os.makedirs("temp_uploads", exist_ok=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                file_path = os.path.join("temp_uploads", uploaded_file.name)
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ
                workflow = ResumeProcessingWorkflow()
                result = workflow.process_resume(file_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session state
                st.session_state.processing_result = result

                # –û—á–∏—Å—Ç–∫–∞
                os.remove(file_path)

                # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤ production)
                # st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ session_state")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            result = st.session_state.processing_result
    else:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
        st.session_state.current_file_name = None
        st.session_state.processing_result = None
        st.session_state.custom_summary = None

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if st.session_state.processing_result is not None:
        result = st.session_state.processing_result

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if result.get("error"):
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å API
            if "API" in result["error"]:
                st.warning("""
                **–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:** –ü—Ä–æ–±–ª–µ–º–∞ —Å API-–∫–ª—é—á–æ–º

                Comet API –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: "Sorry, you have been blocked"
                OpenRouter –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É: "The model 'api/v1' is not available"

                **–†–µ—à–µ–Ω–∏–µ:**
                1. –î–ª—è Comet: —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                2. –î–ª—è OpenRouter: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ llmclient.py
                   –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "qwen/qwen-2.5-72b-instruct")
                """)
        else:
            st.success("‚úÖ The resume has been successfully processed!")

            # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if result.get("validation_result"):
                validation = result["validation_result"]
                st.subheader("üîç Validation result")

                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("### Is this a resume?")
                    if validation["is_resume"]:
                        st.markdown(
                            f"##### :green[YES] (Confidence score, that this file is a resume: {validation['confidence']:.2f})")
                    else:
                        st.markdown(
                            f"##### :red[NO] (Confidence score, that this file is a resume: {validation['confidence']:.2f})")
                    # st.metric("–≠—Ç–æ —Ä–µ–∑—é–º–µ?", "–î–∞" if validation["is_resume"] else "–ù–µ—Ç",
                    #           delta=f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –≤ —Ç–æ–º —á—Ç–æ —Ñ–∞–π–ª - —Ä–µ–∑—é–º–µ: {validation['confidence']:.2f}")
                    # st.write(f"**–§–æ—Ä–º–∞—Ç:** {validation['primary_format']}")
                    # st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:** {validation['suggested_action']}")

                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—é–º–µ
                if result.get("extraction_result") and result.get("validation_result", {}).get("is_resume", False):
                    st.subheader("üìä Extracted information")

                    extraction = result["extraction_result"]

                    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.markdown("### üë§ Personal information")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.write("**Full name:**", extraction["full_name"] or "Not found")
                    with col2:
                        st.write("**Email:**", extraction["email"] or "Not found")
                    with col3:
                        st.write("**Phone:**", extraction["phone_number"] or "Not found")

                    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
                    if extraction["education"]:
                        st.markdown("### üéì Education")
                        for edu in extraction["education"]:
                            with st.expander(f"{edu['degree']} in {edu['field']}"):
                                st.write("**Institution:**", edu["institution"] or "Not stated")
                                period = f"{edu['start_date']} - {edu['end_date']}"
                                st.write("**Date:**", period)
                                if edu["grade"]:
                                    st.write("**Grade/GPA:**", edu["grade"])

                    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
                    if extraction["employment_details"]:
                        st.markdown("### üíº Working experience")
                        for emp in extraction["employment_details"]:
                            with st.expander(f"{emp['title']} –≤ {emp['company']}"):
                                st.write("**Location:**", emp["location"] or "Not stated")
                                period = f"{emp['start_date']} - {emp['end_date']}"
                                st.write("**Period:**", period)
                                st.write("**Description:**", emp["description"] or "Not stated")

                    # –ù–∞–≤—ã–∫–∏
                    col1, col2 = st.columns(2)

                    with col1:
                        if extraction["technical_skills"]:
                            st.markdown("### üõ†Ô∏è Technical skills")
                            for skill in extraction["technical_skills"]:
                                st.write(f"**{skill['category'] or 'Other'}**: {', '.join(skill['skills'])}")

                    with col2:
                        if extraction["languages"]:
                            st.markdown("### üåç Languages")
                            for lang in extraction["languages"]:
                                st.write(f"- **{lang['language']}**: {lang['proficiency'] or 'Proficiency not stated'}")

                    # –î—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã
                    if extraction["projects"]:
                        st.markdown("### üìÇ Projects")
                        for project in extraction["projects"]:
                            with st.expander(project["title"] or "Unnamed project"):
                                st.write("**Description:**", project["description"] or "Not stated")
                                st.write("**Technologies:**", ", ".join(project["technologies"]) if project[
                                    "technologies"] else "Not stated")
                                st.write("**Period:**", project["period"] or "Not stated")

                    if extraction["publications"]:
                        st.markdown("### üìö Publications")
                        for pub in extraction["publications"]:
                            with st.expander(pub["title"] or "Unnamed publication"):
                                st.write("**Venue:**", pub["venue"] or "Not stated")
                                st.write("**Year:**", pub["year"] or "Not stated")
                                st.write("**Authors:**", ", ".join(pub["authors"]) if pub["authors"] else "Not stated")
                                st.write("**Link:**", pub["link"] or "Not stated")

                    if extraction["soft_skills"]:
                        st.markdown("### ü§ù Soft skills")
                        st.write(", ".join(extraction["soft_skills"]))

                    if extraction["additional_information"]:
                        st.markdown("### ‚ÑπÔ∏è Additional information")
                        st.write(extraction["additional_information"])

                    # –ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Ä–µ–∑—é–º–µ
                    if result.get("summary"):
                        st.markdown("### üìù Resume Summary")
                        st.write(result["summary"])

                    # Custom Summary section
                    st.markdown("### üîß Custom Summary by Parameters")
                    fixed_params = ['experience', 'skills', 'education', 'pros', 'cons', 'projects', 'languages',
                                    'soft_skills', 'certifications']
                    st.info(f"Available parameters: {', '.join(fixed_params)}")
                    params_input = st.text_input(
                        "Enter key parameters (comma-separated):",
                        placeholder="experience, skills, education"
                    )
                    col1, col2 = st.columns(2)
                    generate_btn = col1.button("Generate Custom Summary")
                    clear_btn = col2.button("Clear Summary")

                    if clear_btn:
                        st.session_state.custom_summary = None
                        st.rerun()

                    if generate_btn and params_input.strip():
                        raw_parts = params_input.split(",")
                        parameters = [p.strip().lower() for p in raw_parts if p.strip()]

                        if not parameters:
                            st.warning(
                                "Incorrect format: No valid parameters entered. Please separate parameters with commas.")
                        else:
                            invalid_params = [p for p in parameters if p not in fixed_params]
                            if invalid_params:
                                st.warning(
                                    f"Invalid parameters: {', '.join(invalid_params)}. Please use only from the available list.")
                            elif result.get("file_content"):
                                with st.spinner("Generating custom summary..."):
                                    custom_summary = custom_summarizer(result["file_content"], parameters)
                                    if custom_summary:
                                        st.session_state.custom_summary = custom_summary
                                    else:
                                        st.session_state.custom_summary = None
                                        st.error("Failed to generate custom summary.")
                            else:
                                st.warning("No resume content available for summarization.")
                        st.rerun()

                    # Display the custom summary if it exists
                    if st.session_state.custom_summary:
                        st.markdown("#### Generated Summary")
                        st.write(st.session_state.custom_summary)

                    st.markdown("---")
                    st.subheader("üì• Download results")

                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if result["extraction_result"]:
                        structured_data = json.dumps(result["extraction_result"], indent=2, ensure_ascii=False)
                        st.download_button(
                            label="Download extracted information (JSON)",
                            data=structured_data,
                            file_name=f"resume_data_{int(time.time())}.json",
                            mime="application/json",
                            help="Download only extracted information (JSON).",
                            use_container_width=True
                        )

                # –ï—Å–ª–∏ –Ω–µ —Ä–µ–∑—é–º–µ
                elif result.get("validation_result") and not result["validation_result"]["is_resume"]:
                    st.warning("‚ö†Ô∏è The uploaded document is not recognized as a resume/CV.")
                    st.write("Please upload a valid resume document.")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
    st.sidebar.title("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.info("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã —Ä–µ–∑—é–º–µ.

    **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (PDF/DOCX)
    2. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–∑—é–º–µ
    3. –ï—Å–ª–∏ –¥–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    4. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    # if st.sidebar.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"):
    #     st.session_state.current_file_name = None
    #     st.session_state.processing_result = None
    #     st.rerun()


if __name__ == "__main__":
    main()